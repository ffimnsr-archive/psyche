# set charset to unicode
charset utf-8;

# only log critical errors
error_log /var/log/nginx/error.log crit;

events {
  # determines how much clients will be served per worker
  # max clients = worker_connections * worker_process
  worker_connections 8192;

  # accept asynchronously as many connections as possible
  multi_accept off;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  # turn off access_log to boost I/O on HDD
  access_log off;

  # send headers in one piece, rather than one by one
  tcp_nopush on;

  # don't buffer data sent
  tcp_nodelay on;

  # don't send server info
  server_tokens off;

  # compress data
  gzip on;
  gzip_min_length 10240;
  gzip_comp_level 1;
  gzip_vary on;
  gzip_disable msie6;
  gzip_proxied expired no-cache no-store private auth;
  gzip_types
    text/css
    text/javascript
    text/xml
    text/plain
    text/x-component
    application/javascript
    application/x-javascript
    application/json
    application/xml
    application/rss+xml
    application/atom+xml
    font/truetype
    font/opentype
    application/vnd.ms-fontobject
    image/svg+xml;

  # allow the server to close connection on timedout clients / non-responding clients 
  reset_timedout_connection on;

  # client buffer size for post actions and headers
  client_body_buffer_size 10K;
  client_header_buffer_size 1k;

  # maximum allowed client request size
  client_max_body_size 8m;

  # maximum size of buffers for client headers
  large_client_header_buffers 4 4k;

  # request timeout for nginx to wait for client header and body after a request
  client_body_timeout 12;
  client_header_timeout 12;

  # if client is not active server will close connection
  keepalive_timeout 15;

  # if client fails to receive to receive server's response within this duration close it
  send_timeout 10;

  server {
    listen 80 default_server;

    root /usr/share/nginx/html;
    index index.html;

    location / {
      try_files $uri $uri/ / index.html;
    }

    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|sgvz|mp4|ogg|ogv|webm|htc)$ {
      expires 1M;
      add_header Cache-Control "public";
    }

    location ~* \.(?:css|js)$ {
      try_files $uri =404;
      expires 1M;
      add_header Cache-Control "public";
    }

    location ~ ^/health$ {
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Allow-Methods "GET";
      add_header Access-Control-Allow-Headers "Keep-Alive,Content-Type,User-Agent,Cache-Control";

      default_type application/json;
      return 200 '{"success": true }'
    }

    location ~ ^.+\..+$ {
      try_files $uri =404;
    }

    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
      root /usr/share/nginx/html;
    }
  }
}